// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  } 

  exports.cButton = function(vPressed) {
    return function(label) {
      return function(vDefault) {
        return function(send) {
          return function() {
            var div = document.createElement("div");
            div.className = "flare-input";

            var button = document.createElement("button");
            button.id = getUniqueID();
            button.className = "flare-input-button";
            button.appendChild(document.createTextNode(label));

            button.addEventListener('mousedown', function() {
              send(vPressed)();
            });
            button.addEventListener('mouseup', function() {
              send(vDefault)();
            });

            div.appendChild(button);
            return div;

          };
        };
      };
    };
  };

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.get = function(sig) {
    return function() {
      return sig.get();
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Signal"] = $PS["Signal"] || {};
  var exports = $PS["Signal"];
  var $foreign = $PS["Signal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS);
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Signal.Channel"] = $PS["Signal.Channel"] || {};
  var exports = $PS["Signal.Channel"];
  var $foreign = $PS["Signal.Channel"];
  var Signal = $PS["Signal"];                
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Flare"] = $PS["Flare"] || {};
  var exports = $PS["Flare"];
  var $foreign = $PS["Flare"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Signal = $PS["Signal"];
  var Signal_Channel = $PS["Signal.Channel"];                
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var liftSF = function (f) {
      return function (v) {
          return function __do() {
              var v1 = v();
              return new Flare(v1.value0, f(v1.value1));
          };
      };
  };
  var functorFlare = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Data_Functor.Functor(function (f) {
      return function (v) {
          return UI(Data_Functor.map(Effect.functorEffect)(Data_Functor.map(functorFlare)(f))(v));
      };
  });
  var foldp = function (f) {
      return function (x0) {
          return liftSF(Signal.foldp(f)(x0));
      };
  };
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)((function () {
                  var $128 = Data_Functor.map(Signal.functorSignal)(handler);
                  return function ($129) {
                      return Signal.runSignal($128($129));
                  };
              })())(ui);
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var runFlareShow = function (dictShow) {
      return function (controls) {
          return function (target) {
              return function (ui) {
                  return runFlare(controls)(target)(Data_Functor.map(functorUI)(Data_Show.show(dictShow))(ui));
              };
          };
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                     
  var button = function (label) {
      return function (vDefault) {
          return function (vPressed) {
              return createUI($foreign.cButton(vPressed))(label)(vDefault);
          };
      };
  };
  var applyFlare = new Control_Apply.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Control_Apply.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Effect.applyEffect)(Control_Apply.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Control_Applicative.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Control_Applicative.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(applicativeFlare)(x)));
  });
  var buttons = function (dictTraversable) {
      return function (xs) {
          return function (toString) {
              var toButton = function (x) {
                  return button(toString(x))(Data_Maybe.Nothing.value)(new Data_Maybe.Just(x));
              };
              return Data_Functor.map(functorUI)((function () {
                  var $140 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
                  var $141 = Data_Foldable.foldMap(dictTraversable.Foldable1())(Data_Maybe_First.monoidFirst)(Data_Maybe_First.First);
                  return function ($142) {
                      return $140($141($142));
                  };
              })())(Data_Traversable.traverse(dictTraversable)(applicativeUI)(toButton)(xs));
          };
      };
  };
  exports["button"] = button;
  exports["buttons"] = buttons;
  exports["liftSF"] = liftSF;
  exports["foldp"] = foldp;
  exports["flareWith"] = flareWith;
  exports["runFlareWith"] = runFlareWith;
  exports["runFlare"] = runFlare;
  exports["runFlareShow"] = runFlareShow;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS);
(function($PS) {
  "use strict";
  $PS["Foldp"] = $PS["Foldp"] || {};
  var exports = $PS["Foldp"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Flare = $PS["Flare"];                
  var Increment = (function () {
      function Increment() {

      };
      Increment.value = new Increment();
      return Increment;
  })();
  var Decrement = (function () {
      function Decrement() {

      };
      Decrement.value = new Decrement();
      return Decrement;
  })();
  var showAction = new Data_Show.Show(function (v) {
      if (v instanceof Increment) {
          return "+";
      };
      if (v instanceof Decrement) {
          return "-";
      };
      throw new Error("Failed pattern match at Foldp (line 19, column 1 - line 21, column 23): " + [ v.constructor.name ]);
  });
  var ui = Flare.foldp(function (action) {
      return function (x) {
          if (action instanceof Data_Maybe.Just && action.value0 instanceof Increment) {
              return x + 1 | 0;
          };
          if (action instanceof Data_Maybe.Just && action.value0 instanceof Decrement) {
              return x - 1 | 0;
          };
          if (action instanceof Data_Maybe.Nothing) {
              return x;
          };
          throw new Error("Failed pattern match at Foldp (line 12, column 26 - line 15, column 17): " + [ action.constructor.name ]);
      };
  })(0)(Flare.buttons(Data_Traversable.traversableArray)([ Increment.value, Decrement.value ])(Data_Show.show(showAction)));
  var main = Flare.runFlareShow(Data_Show.showInt)("controls")("output")(ui);
  exports["main"] = main;
  exports["ui"] = ui;
  exports["Increment"] = Increment;
  exports["Decrement"] = Decrement;
  exports["showAction"] = showAction;
})(PS);
PS["Foldp"].main();